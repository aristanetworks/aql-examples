let devices = merge(`analytics:/tags/labels/devices/pod_name/value/<_POD_NAME>/elements`)
let bgpPeerInfoStatusEntry = `*:/Sysdb/cell/1/routing/bgp/export/vrfBgpPeerInfoStatusEntryTable/default/bgpPeerInfoStatusEntry/*`
if str(_POD_NAME) == "" {
    let bgpNeighbors =`analytics:/Devices/*/versioned-data/routing/bgp/status/vrf/default/bgpPeerInfoStatusEntry/*`
} else {
    let bgpNeighbors =`analytics:/Devices/*/versioned-data/routing/bgp/status/vrf/default/bgpPeerInfoStatusEntry/*` | where(dictHasKey(devices, complexKey("{\"deviceID\": \""+_key+"\"}")))
}
let bgpPeerStatisticsEntry = `*:/Smash/routing/bgp/bgpPeerInfoStatus/default/bgpPeerStatisticsEntry`
let afis = newDict()
let afi_name = newDict()
let bgpPeerAfiSafiActive = newDict() | setFields("l2vpnEvpn", 3, "ipv4Unicast", 1)
let bgpPeerAfiSafiActiveName = newDict() | setFields("l2vpnEvpn","L2VPN EVPN", "ipv4Unicast", "IPv4 Unicast")

# This is the table
let result = newDict()
let id = 0
# Lets loop over every device
for device, deviceSessions in bgpNeighbors{
    # And each session on the devices
    for ip, sessionData in deviceSessions{
        let data = merge(sessionData)
        # Add one to the ID
        let id = id + 1
        result[id] = newDict()
        # This is where we add the various columns
        result[id]["0. Device"] = device
        result[id]["1. Status"] = data["bgpState"]["Name"]
        result[id]["2. Peering Address"] = data["bgpPeerLocalAddr"]
        result[id]["3. Neighbor Address"] = data["key"]
        result[id]["4. Neighbor AS"] = data["bgpPeerAs"]["value"]
        if dictHasKey(bgpPeerInfoStatusEntry, device) && dictHasKey(bgpPeerStatisticsEntry, device) {
            let test = merge(bgpPeerInfoStatusEntry[device][ip])
            for kafi, kval in test["bgpPeerAfiSafiActive"]{
                if kval == true {
                    afis[device] = bgpPeerAfiSafiActive[kafi]
                    afi_name[device] = bgpPeerAfiSafiActiveName[kafi]
                }
            }
            let bgpPeerAfiSafiStats = merge(bgpPeerStatisticsEntry[device])
            if dictHasKey(afis, device){
                result[id]["6. PfxRcd"] = bgpPeerAfiSafiStats[ip]["bgpPeerAfiSafiStats"][afis[device]]["prefixIn"]
                result[id]["7. PfxAcc"] = bgpPeerAfiSafiStats[ip]["bgpPeerAfiSafiStats"][afis[device]]["prefixAcceptedIn"]
            }
            result[id]["8. Up/Down"] = str(duration(1000000000*round(num(now() - time(data["bgpPeerIntoOrOutOfEstablishedTime"]*1000000000))/1000000000)))
        }
    }
}
result